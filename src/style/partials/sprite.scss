/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$bx-pager-link-hover-name: 'bx-pager-link-hover';
$bx-pager-link-hover-x: 0px;
$bx-pager-link-hover-y: 0px;
$bx-pager-link-hover-offset-x: 0px;
$bx-pager-link-hover-offset-y: 0px;
$bx-pager-link-hover-width: 20px;
$bx-pager-link-hover-height: 20px;
$bx-pager-link-hover-total-width: 54px;
$bx-pager-link-hover-total-height: 207px;
$bx-pager-link-hover-image: '../images/sprite.png';
$bx-pager-link-hover: (0px, 0px, 0px, 0px, 20px, 20px, 54px, 207px, '../images/sprite.png', 'bx-pager-link-hover', );
$bx-pager-link-name: 'bx-pager-link';
$bx-pager-link-x: 0px;
$bx-pager-link-y: 25px;
$bx-pager-link-offset-x: 0px;
$bx-pager-link-offset-y: -25px;
$bx-pager-link-width: 20px;
$bx-pager-link-height: 20px;
$bx-pager-link-total-width: 54px;
$bx-pager-link-total-height: 207px;
$bx-pager-link-image: '../images/sprite.png';
$bx-pager-link: (0px, 25px, 0px, -25px, 20px, 20px, 54px, 207px, '../images/sprite.png', 'bx-pager-link', );
$company-icon-name: 'company-icon';
$company-icon-x: 0px;
$company-icon-y: 50px;
$company-icon-offset-x: 0px;
$company-icon-offset-y: -50px;
$company-icon-width: 54px;
$company-icon-height: 66px;
$company-icon-total-width: 54px;
$company-icon-total-height: 207px;
$company-icon-image: '../images/sprite.png';
$company-icon: (0px, 50px, 0px, -50px, 54px, 66px, 54px, 207px, '../images/sprite.png', 'company-icon', );
$lock-name: 'lock';
$lock-x: 0px;
$lock-y: 121px;
$lock-offset-x: 0px;
$lock-offset-y: -121px;
$lock-width: 9px;
$lock-height: 14px;
$lock-total-width: 54px;
$lock-total-height: 207px;
$lock-image: '../images/sprite.png';
$lock: (0px, 121px, 0px, -121px, 9px, 14px, 54px, 207px, '../images/sprite.png', 'lock', );
$map-link-name: 'map-link';
$map-link-x: 0px;
$map-link-y: 140px;
$map-link-offset-x: 0px;
$map-link-offset-y: -140px;
$map-link-width: 49px;
$map-link-height: 45px;
$map-link-total-width: 54px;
$map-link-total-height: 207px;
$map-link-image: '../images/sprite.png';
$map-link: (0px, 140px, 0px, -140px, 49px, 45px, 54px, 207px, '../images/sprite.png', 'map-link', );
$phone-name: 'phone';
$phone-x: 0px;
$phone-y: 190px;
$phone-offset-x: 0px;
$phone-offset-y: -190px;
$phone-width: 11px;
$phone-height: 17px;
$phone-total-width: 54px;
$phone-total-height: 207px;
$phone-image: '../images/sprite.png';
$phone: (0px, 190px, 0px, -190px, 11px, 17px, 54px, 207px, '../images/sprite.png', 'phone', );
$spritesheet-width: 54px;
$spritesheet-height: 207px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($bx-pager-link-hover, $bx-pager-link, $company-icon, $lock, $map-link, $phone, );
$spritesheet: (54px, 207px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
